// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/java/tk/skuro/idea/orgmode/parser/Org.flex

package tk.skuro.idea.orgmode.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static tk.skuro.idea.orgmode.parser.OrgTokenTypes.*;

// TODO: see if could reuse org lexer src/org_lexer.l


class _OrgLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK = 2;
  public static final int PROPERTIES = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\2\0\1\7\6\0\1\10\1\11\16\0\1\12\7\0"+
    "\1\13\1\0\1\14\1\15\1\0\1\16\1\0\1\17"+
    "\4\0\1\20\1\21\1\22\1\0\1\23\1\24\1\25"+
    "\12\0\1\26\36\0\1\27\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\3\1\1\2\1\3\1\4"+
    "\2\1\10\5\6\6\2\0\2\3\3\0\1\7\2\0"+
    "\1\3\1\10\2\0\1\2\1\0\1\3\1\2\1\0"+
    "\1\3\1\2\3\0\2\3\1\11\2\0\1\3\1\0"+
    "\2\3\1\0\1\12\2\0\1\3\3\0\2\3\3\0"+
    "\1\13\2\3\2\0\1\3\3\0\2\3\1\14\2\0"+
    "\2\13\2\3\2\0\1\3\1\15\2\0\2\3\2\0"+
    "\2\3\2\0\1\3\2\0\1\3\1\14\2\0\1\3"+
    "\1\14\2\0\1\16\1\0\1\3\1\0\1\3\2\0"+
    "\1\17\1\0\1\17\3\0\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\140\0\170\0\220\0\250"+
    "\0\300\0\330\0\360\0\u0108\0\u0120\0\u0138\0\u0150\0\u0168"+
    "\0\u0180\0\170\0\u0198\0\u01b0\0\330\0\360\0\u0108\0\u01c8"+
    "\0\u01e0\0\170\0\u01f8\0\u01b0\0\330\0\u0210\0\u0108\0\u0228"+
    "\0\360\0\u0240\0\u0258\0\u0270\0\u0288\0\u0108\0\u0108\0\u02a0"+
    "\0\u0168\0\u02b8\0\u02d0\0\u02e8\0\u0300\0\u0198\0\u0318\0\u0330"+
    "\0\u01c8\0\u0348\0\u0360\0\u01f8\0\u0210\0\u0378\0\u0390\0\u03a8"+
    "\0\u03c0\0\u0270\0\u03d8\0\u03f0\0\u0408\0\u0420\0\u0438\0\u0450"+
    "\0\u0468\0\170\0\u0480\0\u0498\0\u04b0\0\u04c8\0\u04e0\0\u04f8"+
    "\0\u0510\0\u0528\0\u0540\0\u0558\0\u0570\0\u0588\0\u05a0\0\u05b8"+
    "\0\u05d0\0\u05e8\0\u0600\0\u0618\0\u0630\0\u0648\0\u0660\0\u0678"+
    "\0\170\0\u0690\0\u06a8\0\170\0\u06c0\0\u06d8\0\u06f0\0\u0708"+
    "\0\u0720\0\u0738\0\170\0\u0750\0\u0768\0\u0780\0\u0798\0\u07b0"+
    "\0\u07c8\0\u07e0\0\u07f8\0\u0810\0\u0828\0\u0840\0\u0858\0\u0798"+
    "\0\u0870\0\u0798\0\u0888\0\u07f8\0\u08a0\0\u07f8\0\u08b8\0\u0840"+
    "\0\u0840\0\u08d0\0\u08e8\0\u0900\0\u0918\0\u0930\0\u08e8\0\u08e8"+
    "\0\u0918\0\u0918\0\u0948\0\u0960\0\u0978\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\0\2\10\1\7\1\11\1\12"+
    "\1\6\1\13\13\6\1\14\2\6\1\15\1\10\1\0"+
    "\2\10\1\15\1\16\1\17\1\6\1\20\13\6\1\14"+
    "\1\21\1\22\1\23\1\10\1\0\2\10\1\23\1\24"+
    "\1\25\1\22\1\26\13\22\1\27\2\22\1\30\1\10"+
    "\1\0\2\10\1\30\1\31\1\25\1\22\1\26\13\22"+
    "\1\27\1\22\1\32\1\33\1\10\1\0\2\10\1\33"+
    "\1\34\1\35\1\32\1\36\13\32\1\37\1\32\31\0"+
    "\1\7\1\10\1\0\2\10\1\7\1\40\2\0\1\41"+
    "\16\0\2\10\1\0\3\10\21\0\2\42\4\0\3\42"+
    "\1\43\16\42\2\44\1\0\2\44\1\0\22\44\15\0"+
    "\1\45\12\0\2\46\1\0\2\46\1\0\20\46\1\47"+
    "\1\46\1\0\1\15\1\10\1\0\2\10\1\15\1\50"+
    "\2\0\1\51\15\0\2\42\4\0\3\42\1\52\16\42"+
    "\2\17\1\0\1\17\1\44\1\0\22\17\6\0\1\53"+
    "\6\0\1\45\4\0\1\54\5\0\2\55\1\0\2\55"+
    "\1\0\21\55\2\0\1\56\1\10\1\0\2\10\1\56"+
    "\1\57\2\0\1\41\15\0\2\42\4\0\3\42\1\60"+
    "\16\42\1\0\1\61\1\10\1\0\2\10\1\61\1\62"+
    "\2\0\1\41\15\0\2\42\4\0\3\42\1\63\16\42"+
    "\1\0\1\64\1\10\1\0\2\10\1\64\1\57\2\0"+
    "\1\65\32\0\1\66\23\0\1\67\16\0\2\42\4\0"+
    "\24\42\4\0\5\42\1\70\1\42\1\71\12\42\2\44"+
    "\1\0\2\44\1\0\2\44\1\72\17\44\20\0\1\73"+
    "\20\0\1\74\16\0\2\75\1\0\1\76\2\0\5\75"+
    "\1\77\1\75\1\100\12\75\2\53\1\0\1\53\2\0"+
    "\22\53\23\0\1\101\4\0\2\55\1\0\2\55\1\0"+
    "\21\55\1\102\11\0\1\103\16\0\2\42\4\0\7\42"+
    "\1\71\12\42\11\0\1\104\16\0\2\42\4\0\7\42"+
    "\1\105\12\42\20\0\1\106\22\0\1\107\1\0\1\110"+
    "\12\0\2\42\4\0\7\42\1\111\14\42\4\0\12\42"+
    "\1\112\7\42\14\0\1\113\13\0\2\76\1\0\1\76"+
    "\2\0\5\76\1\114\1\76\1\115\12\76\2\75\1\0"+
    "\1\76\2\0\4\75\1\116\15\75\2\76\1\0\1\76"+
    "\2\0\4\76\1\116\15\76\2\75\1\0\1\76\2\0"+
    "\4\75\1\116\2\75\1\117\14\75\1\0\1\76\2\0"+
    "\4\75\1\116\5\75\1\120\7\75\21\0\1\121\23\0"+
    "\1\110\27\0\1\122\12\0\2\42\4\0\12\42\1\123"+
    "\7\42\14\0\1\124\30\0\1\125\32\0\1\126\7\0"+
    "\2\42\4\0\10\42\1\127\13\42\4\0\6\42\1\130"+
    "\13\42\12\0\1\131\15\0\2\76\1\0\1\76\2\0"+
    "\4\76\1\116\2\76\1\132\14\76\1\0\1\76\2\0"+
    "\4\76\1\116\5\76\1\133\7\76\2\116\1\134\1\116"+
    "\1\0\1\135\22\116\2\75\1\0\1\76\2\0\4\75"+
    "\1\116\3\75\1\136\13\75\1\0\1\76\2\0\4\75"+
    "\1\116\1\75\1\137\13\75\22\0\1\140\25\0\1\141"+
    "\7\0\2\42\4\0\6\42\1\142\13\42\12\0\1\143"+
    "\33\0\1\144\25\0\1\145\13\0\2\42\4\0\11\42"+
    "\1\146\12\42\4\0\20\42\1\147\1\42\2\76\1\0"+
    "\1\76\2\0\4\76\1\116\3\76\1\150\13\76\1\0"+
    "\1\76\2\0\4\76\1\116\1\76\1\151\13\76\2\0"+
    "\1\134\25\0\2\75\1\0\1\76\2\0\4\75\1\116"+
    "\4\75\1\152\12\75\1\0\1\76\2\0\4\75\1\116"+
    "\13\75\1\153\1\75\15\0\1\154\26\0\1\155\13\0"+
    "\2\42\4\0\20\42\1\156\1\42\17\0\1\157\36\0"+
    "\1\160\1\0\2\42\4\0\12\42\1\161\7\42\2\162"+
    "\1\0\1\162\2\0\22\162\2\76\1\0\1\76\2\0"+
    "\4\76\1\116\4\76\1\163\12\76\1\0\1\76\2\0"+
    "\4\76\1\116\13\76\1\164\1\76\2\75\1\0\1\76"+
    "\2\0\4\75\1\116\5\75\1\165\7\75\2\166\1\0"+
    "\1\166\2\0\4\166\1\116\15\166\23\0\1\167\32\0"+
    "\1\170\1\0\2\171\1\0\1\171\2\0\22\171\20\0"+
    "\1\172\7\0\2\42\4\0\20\42\1\173\1\42\2\76"+
    "\1\0\1\76\2\0\4\76\1\116\5\76\1\174\7\76"+
    "\2\75\1\0\1\76\2\0\4\75\1\116\13\75\1\175"+
    "\1\75\25\0\1\176\30\0\1\177\1\0\2\200\1\0"+
    "\1\200\2\0\22\200\2\76\1\0\1\76\2\0\4\76"+
    "\1\116\13\76\1\201\1\76\2\202\1\0\1\202\2\0"+
    "\4\202\1\116\15\202\17\0\1\203\25\0\1\204\36\0"+
    "\1\205\15\0\1\206\15\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2448];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\13\1\1\11\7\1\1\11\5\1\2\0"+
    "\2\1\3\0\1\1\2\0\2\1\2\0\1\1\1\0"+
    "\2\1\1\0\2\1\3\0\3\1\2\0\1\1\1\0"+
    "\2\1\1\0\1\11\2\0\1\1\3\0\2\1\3\0"+
    "\3\1\2\0\1\1\3\0\2\1\1\11\2\0\1\11"+
    "\3\1\2\0\1\1\1\11\2\0\2\1\2\0\2\1"+
    "\2\0\1\1\2\0\2\1\2\0\2\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _OrgLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TEXT;
            }
          // fall through
          case 17: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 18: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 19: break;
          case 4:
            { yybegin(YYINITIAL); return OUTLINE;
            }
          // fall through
          case 20: break;
          case 5:
            { return BLOCK_CONTENT;
            }
          // fall through
          case 21: break;
          case 6:
            { return DRAWER_CONTENT;
            }
          // fall through
          case 22: break;
          case 7:
            { return UNDERLINE;
            }
          // fall through
          case 23: break;
          case 8:
            { yybegin(YYINITIAL); return CODE;
            }
          // fall through
          case 24: break;
          case 9:
            { return BOLD;
            }
          // fall through
          case 25: break;
          case 10:
            { yybegin(YYINITIAL); return VERBATIM;
            }
          // fall through
          case 26: break;
          case 11:
            { yybegin(YYINITIAL); return KEYWORD;
            }
          // fall through
          case 27: break;
          case 12:
            { return UNMATCHED_DELIMITER;
            }
          // fall through
          case 28: break;
          case 13:
            { yybegin(YYINITIAL); return DRAWER_DELIMITER;
            }
          // fall through
          case 29: break;
          case 14:
            { yybegin(YYINITIAL); return BLOCK_END;
            }
          // fall through
          case 30: break;
          case 15:
            { yybegin(BLOCK); return BLOCK_START;
            }
          // fall through
          case 31: break;
          case 16:
            { yybegin(PROPERTIES); return DRAWER_DELIMITER;
            }
          // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
